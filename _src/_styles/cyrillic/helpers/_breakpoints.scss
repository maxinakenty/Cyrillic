// UP
@mixin up($name) {
  $typeof-name: type-of($name);

  @if $typeof-name == string {
    $min: breakpoint-min($name, $breakpoints);

    @if $min {
      $width: convert-to-em($min);

      @media screen and (min-width: $width) {
        @content;
      }
    } @else {
      @content;
    }

  } @else if $typeof-name == number and $name > $breakpoints-length {
    $width: convert-to-em($name);

    @media screen and (min-width: $width) {
      @content;
    }
  }
}

// DOWN
@mixin down($name) {
  $typeof-name: type-of($name);

  @if $typeof-name == string {
    $max: breakpoint-max($name, $breakpoints);

    @if $max {
      $width: convert-to-em($max);

      @media screen and (max-width: $width) {
        @content;
      }
    } @else {
      @content;
    }

  } @else if $typeof-name == number and $name > $breakpoints-length {
    $width: convert-to-em($name);

    @media screen and (min-width: $width) {
      @content;
    }
  }
}

// ONLY
@mixin only($name) {
  @include up($name) {
    @include down($name) {
      @content;
    }
  }
}

// BENTWEEN
@mixin between($lower, $upper) {
  @include up($lower) {
    @include down($upper) {
      @content;
    }
  }
}

// RETINA
@mixin retina() {
  @media screen and (-webkit-min-device-pixel-ratio: 2),
  (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) {
    @content;
  }
}

// ORIENTATION
@mixin orientation($orientation: portrait) {
  $pure-val: trim($orientation);

  @if $pure-val == 'portrait' {
    @media screen and (orientation: $pure-val) {
      @content;
    }
  } @else if $pure-val == 'landscape' {
    @media screen and (orientation: $pure-val) {
      @content;
    }
  } @else {
    @warn "#{$pure-val} is not correct! Use 'landscape' or 'portrait'.";
  }
}




// NEXT
@function breakpoint-next($name, $breakpoints, $breakpoint-keys: map-keys($breakpoints)) {
  $n: index($breakpoint-keys, $name);

  @return if($n < length($breakpoint-keys), nth($breakpoint-keys, $n + 1), null);
}

// GET
@function get-breakpoint($key) {
  @if map-has-key($breakpoints, $key) {
    @return map-get($breakpoints, $key);
  }

  @warn "#{$key} is not a set breakpoint variable";
  @return null;
}

//  MIN
@function breakpoint-min($name, $breakpoints) {
  $min: map-get($breakpoints, $name);

  @return if($min != 0, $min, null);
}

//  MAX
@function breakpoint-max($name, $breakpoints) {
  $next: breakpoint-next($name, $breakpoints);

  @return if($next, breakpoint-min($next, $breakpoints) - 1, null);
}

/// Convers the breakpoints map to a URL-encoded string, like this: `key1=value1&key2=value2`. The value is then dropped into the CSS for a special `<meta>` tag, which is read by the Foundation JavaScript. This is how we transfer values from Sass to JavaScript, so they can be defined in one place.
/// @access private
///
/// @param {Map} $map - Map to convert.
///
/// @returns {String} A string containing the map's contents.
@function breakpoint-serialize($map) {
  $str: '';
  @each $key, $value in $map {
    $str: $str + $key + '=' + convert-to-em($value) + '&';
  }
  $str: str-slice($str, 1, -2);

  @return $str;
}