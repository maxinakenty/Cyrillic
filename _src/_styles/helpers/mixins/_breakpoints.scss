// UP
@mixin up($name) {
  $typeof-name: type-of($name);

  @if $typeof-name == string {
    $min: breakpoint-min($name, $breakpoints);

    @if $min {
      $width: convert-to-em($min);

      @media screen and (min-width: $width) {
        @content;
      }
    } @else {
      @content;
    }

  } @else if $typeof-name == number and $name > $breakpoints-length {
    $width: convert-to-em($name);

    @media screen and (min-width: $width) {
      @content;
    }
  }
}

// DOWN
@mixin down($name) {
  $typeof-name: type-of($name);

  @if $typeof-name == string {
    $max: breakpoint-max($name, $breakpoints);

    @if $max {
      $width: convert-to-em($max);

      @media screen and (max-width: $width) {
        @content;
      }
    } @else {
      @content;
    }

  } @else if $typeof-name == number and $name > $breakpoints-length {
    $width: convert-to-em($name);

    @media screen and (min-width: $width) {
      @content;
    }
  }
}

// ONLY
@mixin only($name) {
  @include up($name) {
    @include down($name) {
      @content;
    }
  }
}

// BENTWEEN
@mixin between($lower, $upper) {
  @include up($lower) {
    @include down($upper) {
      @content;
    }
  }
}

// RETINA
@mixin retina() {
  @media screen and (-webkit-min-device-pixel-ratio: 2),
  (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) {
    @content;
  }
}

// ORIENTATION
@mixin orientation($orientation: portrait) {
  $pure-val: trim($orientation);

  @if $pure-val == 'portrait' {
    @media screen and (orientation: $pure-val) {
      @content;
    }
  } @else if $pure-val == 'landscape' {
    @media screen and (orientation: $pure-val) {
      @content;
    }
  } @else {
    @warn "#{$pure-val} is not correct! Use 'landscape' or 'portrait'.";
  }
}
