// NEXT
/// Returns the next breakpoint or null for the last breakpoint, like this: breakpoint-next(sm) => md,
///  or breakpoint-next(sm, (xs: 0, sm: 544px, md: 768px)) => md,
///  or breakpoint-next(sm, $breakpoint-names: (xs sm md)) => md  .
///
/// @param {String} $string - string
/// @param {Map} $breakpoints - map
/// @return {String} A string containing the map's contents.
@function breakpoint-next($name, $breakpoints, $breakpoint-keys: map-keys($breakpoints)) {
  $n: index($breakpoint-keys, $name);

  @return if($n < length($breakpoint-keys), nth($breakpoint-keys, $n + 1), null);
}

// GET
@function get-breakpoint($key) {
  @if map-has-key($breakpoints, $key) {
    @return map-get($breakpoints, $key);
  }

  @warn "#{$key} is not a set breakpoint variable";
  @return null;
}

//  MIN
@function breakpoint-min($name, $breakpoints) {
  $min: map-get($breakpoints, $name);

  @return if($min != 0, $min, null);
}

//  MAX
@function breakpoint-max($name, $breakpoints) {
  $next: breakpoint-next($name, $breakpoints);

  @return if($next, breakpoint-min($next, $breakpoints) - 1, null);
}

/// Convers the breakpoints map to a URL-encoded string, like this: `key1=value1&key2=value2`. The value is then dropped into the CSS for a special `<meta>` tag, which is read by the Foundation JavaScript. This is how we transfer values from Sass to JavaScript, so they can be defined in one place.
/// @param {Map} $map - Map to convert.
///
/// @returns {String} A string containing the map's contents.
@function breakpoint-serialize($map) {
  $str: '';
  @each $key, $value in $map {
    $str: $str + $key + '=' + convert-to-em($value) + '&';
  }
  $str: str-slice($str, 1, -2);

  @return $str;
}
